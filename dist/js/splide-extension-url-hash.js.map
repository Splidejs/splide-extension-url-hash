{"version":3,"file":"splide-extension-url-hash.js","sources":["../../src/splide/dist/js/splide.esm.js","../../src/splide/src/js/utils/dom/getAttribute/getAttribute.ts","../../src/js/src/js/extensions/URLHash/constants.ts","../../src/js/src/js/extensions/URLHash/URLHash.ts","../../src/js/src/js/build/default.ts"],"sourcesContent":["/*!\n * Splide.js\n * Version  : 3.0.0\n * License  : MIT\n * Copyright: 2021 Naotoshi Fujita\n */\nconst PROJECT_CODE = \"splide\";\nconst DATA_ATTRIBUTE = `data-${PROJECT_CODE}`;\n\nconst CREATED = 1;\nconst MOUNTED = 2;\nconst IDLE = 3;\nconst MOVING = 4;\nconst DESTROYED = 5;\nconst STATES = {\n  CREATED,\n  MOUNTED,\n  IDLE,\n  MOVING,\n  DESTROYED\n};\n\nfunction empty(array) {\n  array.length = 0;\n}\n\nfunction isObject(subject) {\n  return !isNull(subject) && typeof subject === \"object\";\n}\nfunction isArray(subject) {\n  return Array.isArray(subject);\n}\nfunction isFunction(subject) {\n  return typeof subject === \"function\";\n}\nfunction isString(subject) {\n  return typeof subject === \"string\";\n}\nfunction isUndefined(subject) {\n  return typeof subject === \"undefined\";\n}\nfunction isNull(subject) {\n  return subject === null;\n}\nfunction isHTMLElement(subject) {\n  return subject instanceof HTMLElement;\n}\nfunction isHTMLButtonElement(subject) {\n  return subject instanceof HTMLButtonElement;\n}\n\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\n\nfunction forEach(values, iteratee) {\n  toArray(values).forEach(iteratee);\n}\n\nfunction includes(array, value) {\n  return array.indexOf(value) > -1;\n}\n\nfunction push(array, items) {\n  array.push(...toArray(items));\n  return array;\n}\n\nconst arrayProto = Array.prototype;\n\nfunction slice(arrayLike, start, end) {\n  return arrayProto.slice.call(arrayLike, start, end);\n}\n\nfunction find(arrayLike, predicate) {\n  return slice(arrayLike).filter(predicate)[0];\n}\n\nfunction toggleClass(elm, classes, add) {\n  if (elm) {\n    forEach(classes, (name) => {\n      if (name) {\n        elm.classList[add ? \"add\" : \"remove\"](name);\n      }\n    });\n  }\n}\n\nfunction addClass(elm, classes) {\n  toggleClass(elm, classes, true);\n}\n\nfunction append(parent, children) {\n  forEach(children, parent.appendChild.bind(parent));\n}\n\nfunction before(nodes, ref) {\n  forEach(nodes, (node) => {\n    const parent = ref.parentNode;\n    if (parent) {\n      parent.insertBefore(node, ref);\n    }\n  });\n}\n\nfunction matches(elm, selector) {\n  return (elm[\"msMatchesSelector\"] || elm.matches).call(elm, selector);\n}\n\nfunction children(parent, selector) {\n  return parent ? slice(parent.children).filter((child) => matches(child, selector)) : [];\n}\n\nfunction child(parent, selector) {\n  return selector ? children(parent, selector)[0] : parent.firstElementChild;\n}\n\nfunction forOwn(object, iteratee) {\n  if (object) {\n    const keys = Object.keys(object);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (key !== \"__proto__\") {\n        if (iteratee(object[key], key) === false) {\n          break;\n        }\n      }\n    }\n  }\n  return object;\n}\n\nfunction assign(object, ...sources) {\n  sources.forEach((source) => {\n    forOwn(source, (value, key) => {\n      object[key] = source[key];\n    });\n  });\n  return object;\n}\n\nfunction merge(object, source) {\n  forOwn(source, (value, key) => {\n    object[key] = isObject(value) ? merge(isObject(object[key]) ? object[key] : {}, value) : value;\n  });\n  return object;\n}\n\nfunction removeAttribute(elm, attrs) {\n  if (elm) {\n    forEach(attrs, (attr) => {\n      elm.removeAttribute(attr);\n    });\n  }\n}\n\nfunction setAttribute(elm, attrs, value) {\n  if (isObject(attrs)) {\n    forOwn(attrs, (value2, name) => {\n      setAttribute(elm, name, value2);\n    });\n  } else {\n    isNull(value) ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));\n  }\n}\n\nfunction create(tag, attrs, parent) {\n  const elm = document.createElement(tag);\n  if (attrs) {\n    if (isString(attrs) || isArray(attrs)) {\n      addClass(elm, attrs);\n    } else {\n      setAttribute(elm, attrs);\n    }\n  }\n  if (parent) {\n    append(parent, elm);\n  }\n  return elm;\n}\n\nfunction style(elms, styles) {\n  if (isString(styles)) {\n    return isArray(elms) ? null : getComputedStyle(elms)[styles];\n  }\n  forOwn(styles, (value, key) => {\n    if (!isNull(value)) {\n      forEach(elms, (elm) => {\n        if (elm) {\n          elm.style[key] = `${value}`;\n        }\n      });\n    }\n  });\n}\n\nfunction display(elm, display2) {\n  style(elm, { display: display2 });\n}\n\nfunction getAttribute(elm, attr) {\n  return elm.getAttribute(attr);\n}\n\nfunction hasClass(elm, className) {\n  return elm && elm.classList.contains(className);\n}\n\nfunction parseHtml(html) {\n  return child(new DOMParser().parseFromString(html, \"text/html\").body);\n}\n\nfunction prevent(e, stopPropagation) {\n  e.preventDefault();\n  if (stopPropagation) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\n\nfunction query(parent, selector) {\n  return parent && parent.querySelector(selector);\n}\n\nfunction queryAll(parent, selector) {\n  return slice(parent.querySelectorAll(selector));\n}\n\nfunction rect(target) {\n  return target.getBoundingClientRect();\n}\n\nfunction remove(nodes) {\n  forEach(nodes, (node) => {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  });\n}\n\nfunction removeClass(elm, classes) {\n  toggleClass(elm, classes, false);\n}\n\nfunction unit(value) {\n  return isString(value) ? value : value ? `${value}px` : \"\";\n}\n\nfunction assert(condition, message = \"\") {\n  if (!condition) {\n    throw new Error(`[${PROJECT_CODE}] ${message}`);\n  }\n}\n\nfunction nextTick(callback) {\n  setTimeout(callback);\n}\n\nconst noop = () => {\n};\n\nfunction raf(func) {\n  return requestAnimationFrame(func);\n}\n\nfunction between(number, minOrMax, maxOrMin, exclusive) {\n  const min = Math.min(minOrMax, maxOrMin);\n  const max = Math.max(minOrMax, maxOrMin);\n  return exclusive ? min < number && number < max : min <= number && number <= max;\n}\n\nconst { max: max$1, min: min$1 } = Math;\nfunction clamp(number, x, y) {\n  const minimum = min$1(x, y);\n  const maximum = max$1(x, y);\n  return min$1(max$1(minimum, number), maximum);\n}\n\nfunction sign(x) {\n  return +(x > 0) - +(x < 0);\n}\n\nconst { min, max, floor, ceil, abs, round } = Math;\n\nfunction format(string, replacements) {\n  forEach(replacements, (replacement) => {\n    string = string.replace(\"%s\", `${replacement}`);\n  });\n  return string;\n}\n\nfunction pad(number) {\n  return number < 10 ? `0${number}` : `${number}`;\n}\n\nconst ids = {};\nfunction uniqueId(prefix) {\n  return `${prefix}${pad(ids[prefix] = (ids[prefix] || 0) + 1)}`;\n}\n\nfunction Options(Splide2, Components2, options) {\n  let initialOptions;\n  let points;\n  let currPoint;\n  function setup() {\n    try {\n      merge(options, JSON.parse(getAttribute(Splide2.root, DATA_ATTRIBUTE)));\n    } catch (e) {\n      assert(false, e.message);\n    }\n    initialOptions = merge({}, options);\n  }\n  function mount() {\n    const { breakpoints } = options;\n    if (breakpoints) {\n      points = Object.keys(breakpoints).sort((n, m) => +n - +m).map((point) => [\n        point,\n        matchMedia(`(${options.mediaQuery || \"max\"}-width:${point}px)`)\n      ]);\n      addEventListener(\"resize\", observe);\n      observe();\n    }\n  }\n  function destroy(completely) {\n    if (completely) {\n      removeEventListener(\"resize\", observe);\n    }\n  }\n  function observe() {\n    const item = find(points, (item2) => item2[1].matches) || [];\n    if (item[0] !== currPoint) {\n      onMatch(currPoint = item[0]);\n    }\n  }\n  function onMatch(point) {\n    const newOptions = options.breakpoints[point] || initialOptions;\n    if (newOptions.destroy) {\n      Splide2.options = initialOptions;\n      Splide2.destroy(newOptions.destroy === \"completely\");\n    } else {\n      if (Splide2.state.is(DESTROYED)) {\n        destroy(true);\n        Splide2.mount();\n      }\n      Splide2.options = newOptions;\n    }\n  }\n  return {\n    setup,\n    mount,\n    destroy\n  };\n}\n\nconst RTL = \"rtl\";\nconst TTB = \"ttb\";\n\nconst ORIENTATION_MAP = {\n  marginRight: [\"marginBottom\", \"marginLeft\"],\n  width: [\"height\"],\n  autoWidth: [\"autoHeight\"],\n  fixedWidth: [\"fixedHeight\"],\n  paddingLeft: [\"paddingTop\", \"paddingRight\"],\n  paddingRight: [\"paddingBottom\", \"paddingLeft\"],\n  left: [\"top\", \"right\"],\n  right: [\"bottom\", \"left\"],\n  x: [\"y\"],\n  X: [\"Y\"],\n  pageX: [\"pageY\"],\n  ArrowLeft: [\"ArrowUp\", \"ArrowRight\"],\n  ArrowRight: [\"ArrowDown\", \"ArrowLeft\"]\n};\nfunction Direction(Splide2, Components2, options) {\n  function resolve(prop, axisOnly) {\n    const { direction } = options;\n    const index = direction === RTL && !axisOnly ? 1 : direction === TTB ? 0 : -1;\n    return ORIENTATION_MAP[prop][index] || prop;\n  }\n  function orient(value) {\n    return value * (options.direction === RTL ? 1 : -1);\n  }\n  return {\n    resolve,\n    orient\n  };\n}\n\nconst CLASS_ROOT = PROJECT_CODE;\nconst CLASS_SLIDER = `${PROJECT_CODE}__slider`;\nconst CLASS_TRACK = `${PROJECT_CODE}__track`;\nconst CLASS_LIST = `${PROJECT_CODE}__list`;\nconst CLASS_SLIDE = `${PROJECT_CODE}__slide`;\nconst CLASS_CLONE = `${CLASS_SLIDE}--clone`;\nconst CLASS_CONTAINER = `${CLASS_SLIDE}__container`;\nconst CLASS_ARROWS = `${PROJECT_CODE}__arrows`;\nconst CLASS_ARROW = `${PROJECT_CODE}__arrow`;\nconst CLASS_ARROW_PREV = `${CLASS_ARROW}--prev`;\nconst CLASS_ARROW_NEXT = `${CLASS_ARROW}--next`;\nconst CLASS_PAGINATION = `${PROJECT_CODE}__pagination`;\nconst CLASS_PAGINATION_PAGE = `${CLASS_PAGINATION}__page`;\nconst CLASS_PROGRESS = `${PROJECT_CODE}__progress`;\nconst CLASS_PROGRESS_BAR = `${CLASS_PROGRESS}__bar`;\nconst CLASS_AUTOPLAY = `${PROJECT_CODE}__autoplay`;\nconst CLASS_PLAY = `${PROJECT_CODE}__play`;\nconst CLASS_PAUSE = `${PROJECT_CODE}__pause`;\nconst CLASS_SPINNER = `${PROJECT_CODE}__spinner`;\nconst CLASS_INITIALIZED = \"is-initialized\";\nconst CLASS_ACTIVE = \"is-active\";\nconst CLASS_PREV = \"is-prev\";\nconst CLASS_NEXT = \"is-next\";\nconst CLASS_VISIBLE = \"is-visible\";\nconst CLASS_LOADING = \"is-loading\";\nconst STATUS_CLASSES = [CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING];\nconst CLASSES = {\n  slide: CLASS_SLIDE,\n  clone: CLASS_CLONE,\n  arrows: CLASS_ARROWS,\n  arrow: CLASS_ARROW,\n  prev: CLASS_ARROW_PREV,\n  next: CLASS_ARROW_NEXT,\n  pagination: CLASS_PAGINATION,\n  page: CLASS_PAGINATION_PAGE,\n  spinner: CLASS_SPINNER\n};\n\nconst EVENT_MOUNTED = \"mounted\";\nconst EVENT_READY = \"ready\";\nconst EVENT_MOVE = \"move\";\nconst EVENT_MOVED = \"moved\";\nconst EVENT_CLICK = \"click\";\nconst EVENT_ACTIVE = \"active\";\nconst EVENT_INACTIVE = \"inactive\";\nconst EVENT_VISIBLE = \"visible\";\nconst EVENT_HIDDEN = \"hidden\";\nconst EVENT_SLIDE_KEYDOWN = \"slide:keydown\";\nconst EVENT_REFRESH = \"refresh\";\nconst EVENT_UPDATED = \"undated\";\nconst EVENT_RESIZE = \"resize\";\nconst EVENT_RESIZED = \"resized\";\nconst EVENT_DRAG = \"drag\";\nconst EVENT_DRAGGING = \"dragging\";\nconst EVENT_DRAGGED = \"dragged\";\nconst EVENT_SCROLL = \"scroll\";\nconst EVENT_SCROLLED = \"scrolled\";\nconst EVENT_DESTROY = \"destroy\";\nconst EVENT_ARROWS_MOUNTED = \"arrows:mounted\";\nconst EVENT_ARROWS_UPDATED = \"arrows:updated\";\nconst EVENT_PAGINATION_MOUNTED = \"pagination:mounted\";\nconst EVENT_PAGINATION_PAGE = \"pagination:page\";\nconst EVENT_PAGINATION_UPDATED = \"pagination:updated\";\nconst EVENT_NAVIGATION_MOUNTED = \"navigation:mounted\";\nconst EVENT_AUTOPLAY_PLAY = \"autoplay:play\";\nconst EVENT_AUTOPLAY_PLAYING = \"autoplay:playing\";\nconst EVENT_AUTOPLAY_PAUSE = \"autoplay:pause\";\nconst EVENT_LAZYLOAD_LOADED = \"lazyload:loaded\";\n\nfunction EventBus() {\n  let handlers = {};\n  function on(events, callback, key, priority = 10) {\n    forEachEvent(events, (event, namespace) => {\n      handlers[event] = handlers[event] || [];\n      push(handlers[event], {\n        _event: event,\n        _callback: callback,\n        _namespace: namespace,\n        _priority: priority,\n        _key: key\n      }).sort((handler1, handler2) => handler1._priority - handler2._priority);\n    });\n  }\n  function off(events, key) {\n    forEachEvent(events, (event, namespace) => {\n      const eventHandlers = handlers[event];\n      handlers[event] = eventHandlers && eventHandlers.filter((handler) => {\n        return handler._key ? handler._key !== key : handler._namespace !== namespace;\n      });\n    });\n  }\n  function offBy(key) {\n    forOwn(handlers, (eventHandlers, event) => {\n      off(event, key);\n    });\n  }\n  function emit(event) {\n    (handlers[event] || []).forEach((handler) => {\n      handler._callback.apply(handler, slice(arguments, 1));\n    });\n  }\n  function destroy() {\n    handlers = {};\n  }\n  function forEachEvent(events, iteratee) {\n    toArray(events).join(\" \").split(\" \").forEach((eventNS) => {\n      const fragments = eventNS.split(\".\");\n      iteratee(fragments[0], fragments[1]);\n    });\n  }\n  return {\n    on,\n    off,\n    offBy,\n    emit,\n    destroy\n  };\n}\n\nfunction EventInterface(Splide2) {\n  const { event } = Splide2;\n  const key = {};\n  let listeners = [];\n  function on(events, callback, priority) {\n    event.on(events, callback, key, priority);\n  }\n  function off(events) {\n    event.off(events, key);\n  }\n  function bind(targets, events, callback, options) {\n    forEachEvent(targets, events, (target, event2) => {\n      listeners.push([target, event2, callback, options]);\n      target.addEventListener(event2, callback, options);\n    });\n  }\n  function unbind(targets, events) {\n    forEachEvent(targets, events, (target, event2) => {\n      listeners = listeners.filter((listener) => {\n        if (listener[0] === target && listener[1] === event2) {\n          target.removeEventListener(event2, listener[2], listener[3]);\n          return false;\n        }\n        return true;\n      });\n    });\n  }\n  function forEachEvent(targets, events, iteratee) {\n    forEach(targets, (target) => {\n      if (target) {\n        events.split(\" \").forEach(iteratee.bind(null, target));\n      }\n    });\n  }\n  function destroy() {\n    listeners = listeners.filter((data) => unbind(data[0], data[1]));\n    event.offBy(key);\n  }\n  event.on(EVENT_DESTROY, destroy, key);\n  return {\n    on,\n    off,\n    emit: event.emit,\n    bind,\n    unbind,\n    destroy\n  };\n}\n\nfunction RequestInterval(interval, onInterval, onUpdate, limit) {\n  const { now } = Date;\n  let startTime;\n  let rate = 0;\n  let id;\n  let paused = true;\n  let count = 0;\n  function update() {\n    if (!paused) {\n      const elapsed = now() - startTime;\n      if (elapsed >= interval) {\n        rate = 1;\n        startTime = now();\n      } else {\n        rate = elapsed / interval;\n      }\n      if (onUpdate) {\n        onUpdate(rate);\n      }\n      if (rate === 1) {\n        onInterval();\n        if (limit && ++count >= limit) {\n          pause();\n          return;\n        }\n      }\n      raf(update);\n    }\n  }\n  function start(resume) {\n    !resume && cancel();\n    startTime = now() - (resume ? rate * interval : 0);\n    paused = false;\n    raf(update);\n  }\n  function pause() {\n    paused = true;\n  }\n  function rewind() {\n    startTime = now();\n    rate = 0;\n    if (onUpdate) {\n      onUpdate(rate);\n    }\n  }\n  function cancel() {\n    cancelAnimationFrame(id);\n    rate = 0;\n    id = 0;\n    paused = true;\n  }\n  function isPaused() {\n    return paused;\n  }\n  return {\n    start,\n    rewind,\n    pause,\n    cancel,\n    isPaused\n  };\n}\n\nfunction State(initialState) {\n  let state = initialState;\n  function set(value) {\n    state = value;\n  }\n  function is(states) {\n    return includes(toArray(states), state);\n  }\n  return { set, is };\n}\n\nfunction Throttle(func, duration) {\n  let interval;\n  function throttled() {\n    if (!interval) {\n      interval = RequestInterval(duration || 0, () => {\n        func.apply(this, arguments);\n        interval = null;\n      }, null, 1);\n      interval.start();\n    }\n  }\n  return throttled;\n}\n\nfunction Elements(Splide2, Components2, options) {\n  const { on } = EventInterface(Splide2);\n  const { root } = Splide2;\n  const elements = {};\n  const slides = [];\n  let classes;\n  let slider;\n  let track;\n  let list;\n  function setup() {\n    collect();\n    identify();\n    addClass(root, classes = getClasses());\n  }\n  function mount() {\n    on(EVENT_REFRESH, refresh);\n    on(EVENT_UPDATED, update);\n  }\n  function destroy() {\n    empty(slides);\n    removeClass(root, classes);\n  }\n  function refresh() {\n    destroy();\n    setup();\n  }\n  function update() {\n    removeClass(root, classes);\n    addClass(root, classes = getClasses());\n  }\n  function collect() {\n    slider = child(root, `.${CLASS_SLIDER}`);\n    track = query(root, `.${CLASS_TRACK}`);\n    list = child(track, `.${CLASS_LIST}`);\n    assert(track && list, \"Missing a track/list element.\");\n    push(slides, children(list, `.${CLASS_SLIDE}:not(.${CLASS_CLONE})`));\n    const autoplay = find(`.${CLASS_AUTOPLAY}`);\n    const arrows = find(`.${CLASS_ARROWS}`);\n    assign(elements, {\n      root,\n      slider,\n      track,\n      list,\n      slides,\n      arrows,\n      prev: query(arrows, `.${CLASS_ARROW_PREV}`),\n      next: query(arrows, `.${CLASS_ARROW_NEXT}`),\n      bar: query(find(`.${CLASS_PROGRESS}`), `.${CLASS_PROGRESS_BAR}`),\n      play: query(autoplay, `.${CLASS_PLAY}`),\n      pause: query(autoplay, `.${CLASS_PAUSE}`)\n    });\n  }\n  function identify() {\n    const id = root.id || uniqueId(PROJECT_CODE);\n    root.id = id;\n    track.id = track.id || `${id}-track`;\n    list.id = list.id || `${id}-list`;\n  }\n  function find(selector) {\n    return child(root, selector) || child(slider, selector);\n  }\n  function getClasses() {\n    return [\n      `${CLASS_ROOT}--${options.type}`,\n      `${CLASS_ROOT}--${options.direction}`,\n      options.drag && `${CLASS_ROOT}--draggable`,\n      options.isNavigation && `${CLASS_ROOT}--nav`,\n      CLASS_ACTIVE\n    ];\n  }\n  return assign(elements, {\n    setup,\n    mount,\n    destroy\n  });\n}\n\nfunction Style() {\n  let style;\n  let sheet;\n  function mount() {\n    style = create(\"style\", {}, document.head);\n    sheet = style.sheet;\n  }\n  function destroy() {\n    remove(style);\n    sheet = null;\n  }\n  function rule(selector, prop, value) {\n    const { cssRules } = sheet;\n    const cssRule = find(cssRules, (cssRule2) => isCSSStyleRule(cssRule2) && cssRule2.selectorText === selector) || cssRules[sheet.insertRule(`${selector}{}`, 0)];\n    if (isCSSStyleRule(cssRule)) {\n      cssRule.style[prop] = `${value}`;\n    }\n  }\n  function ruleBy(target, prop, value) {\n    rule(`#${isHTMLElement(target) ? target.id : target}`, prop, value);\n  }\n  function isCSSStyleRule(cssRule) {\n    return cssRule instanceof CSSStyleRule;\n  }\n  return {\n    mount,\n    destroy,\n    rule,\n    ruleBy\n  };\n}\n\nconst ROLE = \"role\";\nconst ARIA_CONTROLS = \"aria-controls\";\nconst ARIA_CURRENT = \"aria-current\";\nconst ARIA_LABEL = \"aria-label\";\nconst ARIA_HIDDEN = \"aria-hidden\";\nconst TAB_INDEX = \"tabindex\";\nconst DISABLED = \"disabled\";\nconst ALL_ATTRIBUTES = [\n  ROLE,\n  ARIA_CONTROLS,\n  ARIA_CURRENT,\n  ARIA_LABEL,\n  ARIA_HIDDEN,\n  TAB_INDEX,\n  DISABLED\n];\n\nconst SLIDE = \"slide\";\nconst LOOP = \"loop\";\nconst FADE = \"fade\";\n\nfunction Slide$1(Splide2, index, slideIndex, slide) {\n  const { on, emit, bind, destroy: destroyEvents } = EventInterface(Splide2);\n  const { Components, root, options } = Splide2;\n  const { isNavigation, updateOnMove } = options;\n  const { resolve } = Components.Direction;\n  const isClone = slideIndex > -1;\n  const container = child(slide, `.${CLASS_CONTAINER}`);\n  function mount() {\n    init();\n    bind(slide, \"click keydown\", (e) => {\n      emit(e.type === \"click\" ? EVENT_CLICK : EVENT_SLIDE_KEYDOWN, this, e);\n    });\n    on(EVENT_MOUNTED, onMounted.bind(this));\n  }\n  function onMounted() {\n    const boundUpdate = update.bind(this);\n    boundUpdate();\n    on([EVENT_MOVED, EVENT_UPDATED, EVENT_RESIZED, EVENT_SCROLLED], boundUpdate);\n    if (updateOnMove) {\n      on(EVENT_MOVE, onMove.bind(this));\n    }\n  }\n  function onMove(next, prev, dest) {\n    if (dest === index) {\n      updateActivity.call(this, true);\n    }\n    update.call(this);\n  }\n  function init() {\n    if (!isClone) {\n      slide.id = `${root.id}-slide${pad(index + 1)}`;\n    }\n    if (isNavigation) {\n      if (!isHTMLButtonElement(slide)) {\n        setAttribute(slide, ROLE, \"button\");\n      }\n      const idx = isClone ? slideIndex : index;\n      const label = format(options.i18n.slideX, idx + 1);\n      const controls = Splide2.splides.map((splide) => splide.root.id).join(\" \");\n      setAttribute(slide, ARIA_LABEL, label);\n      setAttribute(slide, ARIA_CONTROLS, controls);\n    }\n  }\n  function destroy() {\n    destroyEvents();\n    removeClass(slide, STATUS_CLASSES);\n    removeAttribute(slide, ALL_ATTRIBUTES);\n  }\n  function update() {\n    const { index: currIndex } = Splide2;\n    updateActivity.call(this, isActive());\n    updateVisibility.call(this, isVisible());\n    toggleClass(slide, CLASS_PREV, index === currIndex - 1);\n    toggleClass(slide, CLASS_NEXT, index === currIndex + 1);\n  }\n  function updateActivity(active) {\n    if (active !== hasClass(slide, CLASS_ACTIVE)) {\n      toggleClass(slide, CLASS_ACTIVE, active);\n      if (isNavigation) {\n        setAttribute(slide, ARIA_CURRENT, active || null);\n      }\n      emit(active ? EVENT_ACTIVE : EVENT_INACTIVE, this);\n    }\n  }\n  function updateVisibility(visible) {\n    setAttribute(slide, ARIA_HIDDEN, !visible || null);\n    setAttribute(slide, TAB_INDEX, visible && options.slideFocus ? 0 : null);\n    if (visible !== hasClass(slide, CLASS_VISIBLE)) {\n      toggleClass(slide, CLASS_VISIBLE, visible);\n      emit(visible ? EVENT_VISIBLE : EVENT_HIDDEN, this);\n    }\n  }\n  function rule(prop, value, useContainer) {\n    const selector = `#${slide.id}${container && useContainer ? ` > .${CLASS_CONTAINER}` : \"\"}`;\n    Components.Style.rule(selector, prop, value);\n  }\n  function isActive() {\n    return Splide2.index === index;\n  }\n  function isVisible() {\n    if (Splide2.is(FADE)) {\n      return isActive();\n    }\n    const trackRect = rect(Components.Elements.track);\n    const slideRect = rect(slide);\n    const left = resolve(\"left\");\n    const right = resolve(\"right\");\n    return floor(trackRect[left]) <= slideRect[left] && slideRect[right] <= ceil(trackRect[right]);\n  }\n  function isWithin(from, distance) {\n    let diff = abs(from - index);\n    if (!Splide2.is(SLIDE) && !isClone) {\n      diff = min(diff, Splide2.length - diff);\n    }\n    return diff <= distance;\n  }\n  return {\n    index,\n    slideIndex,\n    slide,\n    container,\n    isClone,\n    mount,\n    destroy,\n    rule,\n    isWithin\n  };\n}\n\nfunction Slides(Splide2, Components2, options) {\n  const { on, emit, bind } = EventInterface(Splide2);\n  const { slides, list } = Components2.Elements;\n  const Slides2 = [];\n  function mount() {\n    init();\n    on(EVENT_REFRESH, refresh);\n  }\n  function init() {\n    slides.forEach((slide, index) => {\n      register(slide, index, -1);\n    });\n  }\n  function destroy() {\n    forEach$1((Slide2) => {\n      Slide2.destroy();\n    });\n    empty(Slides2);\n  }\n  function refresh() {\n    destroy();\n    init();\n  }\n  function register(slide, index, slideIndex) {\n    const object = Slide$1(Splide2, index, slideIndex, slide);\n    object.mount();\n    Slides2.push(object);\n  }\n  function get(excludeClones) {\n    return excludeClones ? filter((Slide2) => !Slide2.isClone) : Slides2;\n  }\n  function getIn(page) {\n    const { Controller } = Components2;\n    const index = Controller.toIndex(page);\n    const max = Controller.hasFocus() ? 1 : options.perPage;\n    return filter((Slide2) => between(Slide2.index, index, index + max - 1));\n  }\n  function getAt(index) {\n    return filter(index)[0];\n  }\n  function add(items, index) {\n    forEach(items, (slide) => {\n      if (isString(slide)) {\n        slide = parseHtml(slide);\n      }\n      if (isHTMLElement(slide)) {\n        const ref = slides[index];\n        ref ? before(slide, ref) : append(list, slide);\n        addClass(slide, options.classes.slide);\n        observeImages(slide, emit.bind(null, EVENT_RESIZE));\n      }\n    });\n    emit(EVENT_REFRESH);\n  }\n  function remove$1(matcher) {\n    remove(filter(matcher).map((Slide2) => Slide2.slide));\n    emit(EVENT_REFRESH);\n  }\n  function forEach$1(iteratee, excludeClones) {\n    get(excludeClones).forEach(iteratee);\n  }\n  function filter(matcher) {\n    return Slides2.filter(isFunction(matcher) ? matcher : (Slide2) => isString(matcher) ? matches(Slide2.slide, matcher) : includes(toArray(matcher), Slide2.index));\n  }\n  function rule(prop, value, useContainer) {\n    forEach$1((Slide2) => {\n      Slide2.rule(prop, value, useContainer);\n    });\n  }\n  function observeImages(elm, callback) {\n    const images = queryAll(elm, \"img\");\n    let { length } = images;\n    if (length) {\n      images.forEach((img) => {\n        bind(img, \"load error\", () => {\n          if (!--length) {\n            callback();\n          }\n        });\n      });\n    } else {\n      callback();\n    }\n  }\n  function getLength(excludeClones) {\n    return excludeClones ? slides.length : Slides2.length;\n  }\n  function isEnough() {\n    return Slides2.length > options.perPage;\n  }\n  return {\n    mount,\n    destroy,\n    register,\n    get,\n    getIn,\n    getAt,\n    add,\n    remove: remove$1,\n    forEach: forEach$1,\n    filter,\n    rule,\n    getLength,\n    isEnough\n  };\n}\n\nfunction Clones(Splide2, Components2, options) {\n  const { on, emit } = EventInterface(Splide2);\n  const { Elements, Slides } = Components2;\n  const { resolve } = Components2.Direction;\n  const clones = [];\n  let cloneCount;\n  let cloneIndex;\n  function mount() {\n    init();\n    on(EVENT_REFRESH, refresh);\n    on([EVENT_UPDATED, EVENT_RESIZE], observe);\n  }\n  function init() {\n    if (cloneCount = computeCloneCount()) {\n      generate(cloneCount);\n    }\n  }\n  function destroy() {\n    remove(clones);\n    empty(clones);\n  }\n  function refresh() {\n    destroy();\n    init();\n  }\n  function observe() {\n    if (cloneCount !== computeCloneCount()) {\n      emit(EVENT_REFRESH);\n    }\n  }\n  function generate(count) {\n    const slides = Slides.get().slice();\n    const { length } = slides;\n    if (length) {\n      cloneIndex = 0;\n      while (slides.length < count) {\n        push(slides, slides);\n      }\n      slides.slice(-count).concat(slides.slice(0, count)).forEach((Slide, index) => {\n        const isHead = index < count;\n        const clone = cloneDeep(Slide.slide);\n        isHead ? before(clone, slides[0].slide) : append(Elements.list, clone);\n        push(clones, clone);\n        Slides.register(clone, index - count + (isHead ? 0 : length), Slide.index);\n      });\n    }\n  }\n  function cloneDeep(elm) {\n    const clone = elm.cloneNode(true);\n    addClass(clone, options.classes.clone);\n    clone.id = `${Splide2.root.id}-clone${pad(++cloneIndex)}`;\n    return clone;\n  }\n  function computeCloneCount() {\n    let { clones: clones2 } = options;\n    if (!Splide2.is(LOOP)) {\n      clones2 = 0;\n    } else if (!clones2) {\n      const fixedSize = options[resolve(\"fixedWidth\")];\n      const fixedCount = fixedSize && ceil(rect(Elements.track)[resolve(\"width\")] / fixedSize);\n      const baseCount = fixedCount || options[resolve(\"autoWidth\")] && Splide2.length || options.perPage;\n      clones2 = baseCount * (options.drag ? (options.flickMaxPages || 1) + 1 : 2);\n    }\n    return clones2;\n  }\n  return {\n    mount,\n    destroy\n  };\n}\n\nfunction Layout(Splide2, Components2, options) {\n  const { on, bind, emit } = EventInterface(Splide2);\n  const { Slides } = Components2;\n  const { ruleBy } = Components2.Style;\n  const { resolve } = Components2.Direction;\n  const { root, track, list } = Components2.Elements;\n  const { getAt } = Slides;\n  const vertical = options.direction === TTB;\n  function mount() {\n    init();\n    bind(window, \"resize load\", Throttle(emit.bind(this, EVENT_RESIZE)));\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on(EVENT_RESIZE, resize);\n  }\n  function init() {\n    ruleBy(root, \"maxWidth\", unit(options.width));\n    ruleBy(track, resolve(\"paddingLeft\"), cssPadding(false));\n    ruleBy(track, resolve(\"paddingRight\"), cssPadding(true));\n    Slides.rule(resolve(\"marginRight\"), unit(options.gap));\n    Slides.rule(\"width\", cssSlideWidth());\n    setSlidesHeight();\n    resize();\n  }\n  function resize() {\n    ruleBy(track, \"height\", cssTrackHeight());\n    options.heightRatio && setSlidesHeight();\n    emit(EVENT_RESIZED);\n  }\n  function setSlidesHeight() {\n    Slides.rule(\"height\", cssSlideHeight(), true);\n  }\n  function cssPadding(right) {\n    const { padding } = options;\n    const prop = resolve(right ? \"right\" : \"left\", true);\n    return padding ? unit(padding[prop] || (isObject(padding) ? \"0\" : padding)) : \"\";\n  }\n  function cssTrackHeight() {\n    let height = \"\";\n    if (vertical) {\n      height = cssHeight();\n      assert(height, '\"height\" or \"heightRatio\" is missing.');\n      const paddingTop = cssPadding(false);\n      const paddingBottom = cssPadding(true);\n      if (paddingTop || paddingBottom) {\n        height = `calc(${height}`;\n        height += `${paddingTop ? ` - ${paddingTop}` : \"\"}${paddingBottom ? ` - ${paddingBottom}` : \"\"})`;\n      }\n    }\n    return height;\n  }\n  function cssHeight() {\n    return unit(options.height || rect(list).width * options.heightRatio);\n  }\n  function cssSlideWidth() {\n    return options.autoWidth ? \"\" : unit(options.fixedWidth) || (vertical ? \"\" : cssSlideSize());\n  }\n  function cssSlideHeight() {\n    return unit(options.fixedHeight) || (vertical ? options.autoHeight ? \"\" : cssSlideSize() : cssHeight());\n  }\n  function cssSlideSize() {\n    const gap = unit(options.gap);\n    return `calc((100%${gap && ` + ${gap}`})/${options.perPage || 1}${gap && ` - ${gap}`})`;\n  }\n  function listSize() {\n    return rect(list)[resolve(\"width\")];\n  }\n  function slideSize(index, withoutGap) {\n    const Slide = getAt(index || 0);\n    return Slide ? rect(Slide.slide)[resolve(\"width\")] + (withoutGap ? 0 : getGap()) : 0;\n  }\n  function totalSize(index, withoutGap) {\n    const Slide = getAt(index);\n    if (Slide) {\n      const right = rect(Slide.slide)[resolve(\"right\")];\n      const left = rect(list)[resolve(\"left\")];\n      return abs(right - left) + (withoutGap ? 0 : getGap());\n    }\n    return 0;\n  }\n  function sliderSize() {\n    const firstSlide = getAt(0);\n    const lastSlide = getAt(Slides.getLength(true) - 1);\n    if (firstSlide && lastSlide) {\n      return rect(lastSlide.slide)[resolve(\"right\")] - rect(firstSlide.slide)[resolve(\"left\")];\n    }\n    return 0;\n  }\n  function getGap() {\n    const Slide = getAt(0);\n    return Slide ? parseFloat(style(Slide.slide, resolve(\"marginRight\"))) || 0 : 0;\n  }\n  function getPadding(right) {\n    return parseFloat(style(track, resolve(`padding${right ? \"Right\" : \"Left\"}`, true))) || 0;\n  }\n  return {\n    mount,\n    listSize,\n    slideSize,\n    sliderSize,\n    totalSize,\n    getPadding\n  };\n}\n\nfunction Move(Splide2, Components2, options) {\n  const { on, emit } = EventInterface(Splide2);\n  const { slideSize, getPadding, totalSize, listSize, sliderSize } = Components2.Layout;\n  const { resolve, orient } = Components2.Direction;\n  const { list, track } = Components2.Elements;\n  let looping;\n  let waiting;\n  let currPosition = 0;\n  let positionRate = 0;\n  function mount() {\n    on([EVENT_RESIZE, EVENT_UPDATED, EVENT_REFRESH], reposition);\n  }\n  function reposition() {\n    if (options.drag !== \"free\") {\n      jump(Splide2.index);\n    } else {\n      if (!options[resolve(\"fixedWidth\")] && !options[resolve(\"autoWidth\")]) {\n        translate(listSize() * positionRate);\n      }\n      if (isExceededMax(currPosition)) {\n        translate(getLimit(true));\n      }\n    }\n  }\n  function move(dest, index, prev) {\n    if (!isBusy()) {\n      const position = getPosition();\n      looping = dest !== index;\n      waiting = options.waitForTransition;\n      Splide2.state.set(MOVING);\n      emit(EVENT_MOVE, index, prev, dest);\n      Components2.Transition.start(dest, () => {\n        onMoved(dest, index, prev, position);\n      });\n    }\n  }\n  function onMoved(dest, index, prev, oldPosition) {\n    if (looping) {\n      jump(index);\n      looping = false;\n    }\n    waiting = false;\n    Splide2.state.set(IDLE);\n    emit(EVENT_MOVED, index, prev, dest);\n    if (options.trimSpace === \"move\" && dest !== prev && oldPosition === getPosition()) {\n      Components2.Controller.go(dest > prev ? \">\" : \"<\");\n    }\n  }\n  function jump(index) {\n    translate(toPosition(index, true));\n  }\n  function translate(position) {\n    currPosition = loop(position);\n    positionRate = currPosition / listSize();\n    Components2.Style.ruleBy(list, \"transform\", `translate${resolve(\"X\")}(${currPosition}px)`);\n  }\n  function loop(position) {\n    if (!looping && Splide2.is(LOOP)) {\n      const diff = position - currPosition;\n      const exceededMin = isExceededMin(position);\n      const exceededMax = isExceededMax(position);\n      if (exceededMin && diff > 0 || exceededMax && diff < 0) {\n        position += orient(sliderSize() * (exceededMin ? 1 : -1));\n      }\n    }\n    return position;\n  }\n  function cancel() {\n    translate(getPosition());\n    Components2.Transition.cancel();\n  }\n  function toIndex(position) {\n    const Slides = Components2.Slides.get();\n    let index = 0;\n    let minDistance = Infinity;\n    for (let i = 0; i < Slides.length; i++) {\n      const slideIndex = Slides[i].index;\n      const distance = abs(toPosition(slideIndex) - position);\n      if (distance < minDistance) {\n        minDistance = distance;\n        index = slideIndex;\n      } else {\n        break;\n      }\n    }\n    return index;\n  }\n  function toPosition(index, trimming) {\n    const position = orient(totalSize(index - 1) - offset(index));\n    return trimming ? trim(position) : position;\n  }\n  function getPosition() {\n    const left = resolve(\"left\");\n    return rect(list)[left] - rect(track)[left] + orient(getPadding(false));\n  }\n  function trim(position) {\n    if (options.trimSpace && Splide2.is(SLIDE)) {\n      position = clamp(position, 0, orient(sliderSize() - listSize()));\n    }\n    return position;\n  }\n  function offset(index) {\n    const { focus } = options;\n    if (focus === \"center\") {\n      return (listSize() - slideSize(index, true)) / 2;\n    }\n    return (+focus || 0) * slideSize(index);\n  }\n  function getLimit(max) {\n    const trimming = !!options.trimSpace;\n    return max ? toPosition(Components2.Controller.getEnd(), trimming) : toPosition(0, trimming);\n  }\n  function isBusy() {\n    return !!(looping || waiting);\n  }\n  function isExceededMin(position, offset2) {\n    return orient(position) + (offset2 || 0) < orient(getLimit(false));\n  }\n  function isExceededMax(position, offset2) {\n    return orient(position) + (offset2 || 0) > orient(getLimit(true));\n  }\n  function isExceeded() {\n    return isExceededMin(currPosition) || isExceededMax(currPosition);\n  }\n  return {\n    mount,\n    move,\n    jump,\n    translate,\n    cancel,\n    toIndex,\n    toPosition,\n    getPosition,\n    getLimit,\n    isBusy,\n    isExceededMin,\n    isExceededMax,\n    isExceeded\n  };\n}\n\nfunction Controller(Splide2, Components2, options) {\n  const { on } = EventInterface(Splide2);\n  const { Move } = Components2;\n  const { isEnough, getLength } = Components2.Slides;\n  const isLoop = Splide2.is(LOOP);\n  let currIndex = options.start || 0;\n  let prevIndex = currIndex;\n  let slideCount;\n  let perMove;\n  let perPage;\n  function mount() {\n    init();\n    Move.jump(currIndex);\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on(EVENT_SCROLLED, () => {\n      setIndex(Move.toIndex(Move.getPosition()));\n    }, 0);\n  }\n  function init() {\n    slideCount = getLength(true);\n    perMove = options.perMove;\n    perPage = options.perPage;\n  }\n  function go(control, allowSameIndex) {\n    const dest = parse(control);\n    const index = loop(dest);\n    if (index > -1 && !Move.isBusy() && (allowSameIndex || index !== currIndex)) {\n      setIndex(index);\n      Move.move(dest, index, prevIndex);\n    }\n  }\n  function parse(control) {\n    let index = currIndex;\n    if (isString(control)) {\n      const [, indicator, number] = control.match(/([+\\-<>])(\\d+)?/) || [];\n      if (indicator === \"+\" || indicator === \"-\") {\n        index = computeDestIndex(currIndex + +`${indicator}${+number || 1}`, currIndex, true);\n      } else if (indicator === \">\") {\n        index = number ? toIndex(+number) : getNext(true);\n      } else if (indicator === \"<\") {\n        index = getPrev(true);\n      }\n    } else {\n      if (isLoop) {\n        index = clamp(control, -perPage, slideCount + perPage - 1);\n      } else {\n        index = clamp(control, 0, getEnd());\n      }\n    }\n    return index;\n  }\n  function getNext(destination) {\n    return getAdjacent(false, destination);\n  }\n  function getPrev(destination) {\n    return getAdjacent(true, destination);\n  }\n  function getAdjacent(prev, destination) {\n    const dest = computeDestIndex(currIndex + getPerMove() * (prev ? -1 : 1), currIndex);\n    return destination ? dest : loop(dest);\n  }\n  function computeDestIndex(dest, from, incremental) {\n    if (isEnough()) {\n      const end = getEnd();\n      if (dest < 0 || dest > end) {\n        if (between(0, dest, from, true) || between(end, from, dest, true)) {\n          dest = toIndex(toPage(dest));\n        } else {\n          if (isLoop) {\n            dest = perMove ? dest : dest < 0 ? -(slideCount % perPage || perPage) : slideCount;\n          } else if (options.rewind) {\n            dest = dest < 0 ? end : 0;\n          } else {\n            dest = -1;\n          }\n        }\n      } else {\n        if (!isLoop && !incremental && dest !== from) {\n          dest = toIndex(toPage(from) + (dest < from ? -1 : 1));\n        }\n      }\n    } else {\n      dest = -1;\n    }\n    return dest;\n  }\n  function getEnd() {\n    let end = slideCount - perPage;\n    if (hasFocus() || isLoop && perMove) {\n      end = slideCount - 1;\n    }\n    return max(end, 0);\n  }\n  function loop(index) {\n    if (isLoop) {\n      return isEnough() ? index % slideCount + (index < 0 ? slideCount : 0) : -1;\n    }\n    return index;\n  }\n  function toIndex(page) {\n    return clamp(hasFocus() ? page : perPage * page, 0, getEnd());\n  }\n  function toPage(index) {\n    if (!hasFocus()) {\n      index = between(index, slideCount - perPage, slideCount - 1) ? slideCount - 1 : index;\n      index = floor(index / perPage);\n    }\n    return index;\n  }\n  function getPerMove() {\n    return perMove || hasFocus() ? 1 : perPage;\n  }\n  function setIndex(index) {\n    if (index !== currIndex) {\n      prevIndex = currIndex;\n      currIndex = index;\n    }\n  }\n  function getIndex(prev) {\n    return prev ? prevIndex : currIndex;\n  }\n  function hasFocus() {\n    return !isUndefined(options.focus) || options.isNavigation;\n  }\n  return {\n    mount,\n    go,\n    getNext,\n    getPrev,\n    getEnd,\n    setIndex,\n    getIndex,\n    toIndex,\n    toPage,\n    hasFocus\n  };\n}\n\nconst XML_NAME_SPACE = \"http://www.w3.org/2000/svg\";\nconst PATH = \"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z\";\nconst SIZE = 40;\n\nfunction Arrows(Splide2, Components2, options) {\n  const { on, bind, emit } = EventInterface(Splide2);\n  const { classes, i18n } = options;\n  const { Elements, Controller } = Components2;\n  const { slider, track } = Elements;\n  let wrapper = Elements.arrows;\n  let prev = Elements.prev;\n  let next = Elements.next;\n  let created;\n  const arrows = {};\n  function mount() {\n    init();\n    on(EVENT_UPDATED, init);\n  }\n  function init() {\n    if (options.arrows) {\n      if (!prev || !next) {\n        createArrows();\n      }\n    }\n    if (prev && next) {\n      if (!arrows.prev) {\n        setAttribute(prev, ARIA_CONTROLS, track.id);\n        setAttribute(next, ARIA_CONTROLS, track.id);\n        arrows.prev = prev;\n        arrows.next = next;\n        listen();\n        emit(EVENT_ARROWS_MOUNTED, prev, next);\n      } else {\n        display(wrapper, options.arrows === false ? \"none\" : \"\");\n      }\n    }\n  }\n  function destroy() {\n    if (created) {\n      remove(wrapper);\n    } else {\n      removeAttribute(prev, ALL_ATTRIBUTES);\n      removeAttribute(next, ALL_ATTRIBUTES);\n    }\n  }\n  function listen() {\n    const { go } = Controller;\n    on([EVENT_MOUNTED, EVENT_MOVE, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED], update);\n    bind(next, \"click\", () => {\n      go(\">\");\n    });\n    bind(prev, \"click\", () => {\n      go(\"<\");\n    });\n  }\n  function createArrows() {\n    const parent = options.arrows === \"slider\" && slider ? slider : Splide2.root;\n    wrapper = create(\"div\", classes.arrows);\n    prev = createArrow(true);\n    next = createArrow(false);\n    created = true;\n    append(wrapper, [prev, next]);\n    before(wrapper, child(parent));\n  }\n  function createArrow(prev2) {\n    const arrow = `<button class=\"${classes.arrow} ${prev2 ? classes.prev : classes.next}\" type=\"button\"><svg xmlns=\"${XML_NAME_SPACE}\" viewBox=\"0 0 ${SIZE} ${SIZE}\" width=\"${SIZE}\" height=\"${SIZE}\"><path d=\"${options.arrowPath || PATH}\" />`;\n    return parseHtml(arrow);\n  }\n  function update() {\n    const index = Splide2.index;\n    const prevIndex = Controller.getPrev();\n    const nextIndex = Controller.getNext();\n    const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\n    const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\n    prev.disabled = prevIndex < 0;\n    next.disabled = nextIndex < 0;\n    setAttribute(prev, ARIA_LABEL, prevLabel);\n    setAttribute(next, ARIA_LABEL, nextLabel);\n    emit(EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex);\n  }\n  return {\n    arrows,\n    mount,\n    destroy\n  };\n}\n\nfunction Autoplay(Splide2, Components2, options) {\n  const { on, bind, emit } = EventInterface(Splide2);\n  const { root, track, bar, play: playButton, pause: pauseButton } = Components2.Elements;\n  const interval = RequestInterval(options.interval, Splide2.go.bind(Splide2, \">\"), update);\n  const { isPaused } = interval;\n  let hovered;\n  let focused;\n  let paused;\n  function mount() {\n    const { autoplay } = options;\n    if (autoplay) {\n      initButton(true);\n      initButton(false);\n      listen();\n      if (autoplay !== \"pause\") {\n        play();\n      }\n    }\n  }\n  function initButton(forPause) {\n    const button = forPause ? pauseButton : playButton;\n    if (button) {\n      if (!isHTMLButtonElement(button)) {\n        setAttribute(button, ROLE, \"button\");\n      }\n      setAttribute(button, ARIA_CONTROLS, track.id);\n      setAttribute(button, ARIA_LABEL, options.i18n[forPause ? \"pause\" : \"play\"]);\n      bind(button, \"click\", forPause ? pause : play);\n    }\n  }\n  function listen() {\n    if (options.pauseOnHover) {\n      bind(root, \"mouseenter mouseleave\", (e) => {\n        hovered = e.type === \"mouseenter\";\n        autoToggle();\n      });\n    }\n    if (options.pauseOnFocus) {\n      bind(root, \"focusin focusout\", (e) => {\n        focused = e.type === \"focusin\";\n        autoToggle();\n      });\n    }\n    on([EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH], interval.rewind);\n  }\n  function play() {\n    if (isPaused() && Components2.Slides.isEnough()) {\n      interval.start(!options.resetProgress);\n      focused = false;\n      hovered = false;\n      emit(EVENT_AUTOPLAY_PLAY);\n    }\n  }\n  function pause(manual = true) {\n    if (!isPaused()) {\n      interval.pause();\n      emit(EVENT_AUTOPLAY_PAUSE);\n    }\n    paused = manual;\n  }\n  function autoToggle() {\n    if (!paused) {\n      if (!hovered && !focused) {\n        play();\n      } else {\n        pause(false);\n      }\n    }\n  }\n  function update(rate) {\n    emit(EVENT_AUTOPLAY_PLAYING, rate);\n    if (bar) {\n      style(bar, { width: `${rate * 100}%` });\n    }\n  }\n  return {\n    mount,\n    destroy: interval.cancel,\n    play,\n    pause,\n    isPaused\n  };\n}\n\nfunction Cover(Splide2, Components2, options) {\n  const { on } = EventInterface(Splide2);\n  function mount() {\n    if (options.cover) {\n      on(EVENT_LAZYLOAD_LOADED, (img, Slide) => {\n        toggle(true, img, Slide);\n      });\n      on([EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH], apply.bind(null, true));\n    }\n  }\n  function destroy() {\n    apply(false);\n  }\n  function apply(cover) {\n    Components2.Slides.forEach((Slide) => {\n      const img = child(Slide.container || Slide.slide, \"img\");\n      if (img && img.src) {\n        toggle(cover, img, Slide);\n      }\n    });\n  }\n  function toggle(cover, img, Slide) {\n    Slide.rule(\"background\", cover ? `center/cover no-repeat url(\"${img.src}\")` : \"\", true);\n    display(img, cover ? \"none\" : \"\");\n  }\n  return {\n    mount,\n    destroy\n  };\n}\n\nconst BOUNCE_DIFF_THRESHOLD = 10;\nconst BOUNCE_DURATION = 600;\nconst FRICTION_FACTOR = 0.6;\nconst BASE_VELOCITY = 1.2;\nconst MIN_DURATION = 800;\n\nfunction Scroll(Splide2, Components2, options) {\n  const { on, emit } = EventInterface(Splide2);\n  const { Move } = Components2;\n  const { getPosition, getLimit } = Move;\n  let interval;\n  function mount() {\n    on(EVENT_MOVE, clear);\n    on([EVENT_UPDATED, EVENT_REFRESH], cancel);\n  }\n  function scroll(destination, duration, suppressConstraint) {\n    const start = getPosition();\n    let friction = 1;\n    duration = duration || computeDuration(abs(destination - start));\n    clear();\n    interval = RequestInterval(duration, onScrolled, (rate) => {\n      const position = getPosition();\n      const target = start + (destination - start) * easing(rate);\n      const diff = (target - getPosition()) * friction;\n      Move.translate(position + diff);\n      if (Splide2.is(SLIDE) && !suppressConstraint && Move.isExceeded()) {\n        friction *= FRICTION_FACTOR;\n        if (abs(diff) < BOUNCE_DIFF_THRESHOLD) {\n          bounce(Move.isExceededMin(getPosition()));\n        }\n      }\n    }, 1);\n    emit(EVENT_SCROLL);\n    interval.start();\n  }\n  function bounce(backwards) {\n    scroll(getLimit(!backwards), BOUNCE_DURATION, true);\n  }\n  function onScrolled() {\n    emit(EVENT_SCROLLED);\n  }\n  function computeDuration(distance) {\n    return max(distance / BASE_VELOCITY, MIN_DURATION);\n  }\n  function clear() {\n    if (interval) {\n      interval.cancel();\n    }\n  }\n  function cancel() {\n    if (interval && !interval.isPaused()) {\n      clear();\n      onScrolled();\n    }\n  }\n  function easing(t) {\n    const { easingFunc } = options;\n    return easingFunc ? easingFunc(t) : 1 - Math.pow(1 - t, 4);\n  }\n  return {\n    mount,\n    destroy: clear,\n    scroll,\n    cancel\n  };\n}\n\nconst FRICTION = 5;\nconst SAMPLING_INTERVAL = 50;\nconst POINTER_DOWN_EVENTS = \"touchstart mousedown\";\nconst POINTER_MOVE_EVENTS = \"touchmove mousemove\";\nconst POINTER_UP_EVENTS = \"touchend touchcancel mouseup mouseleave\";\n\nfunction Drag(Splide2, Components2, options) {\n  const { emit, bind, unbind } = EventInterface(Splide2);\n  const { track } = Components2.Elements;\n  const { resolve, orient } = Components2.Direction;\n  const { listSize } = Components2.Layout;\n  const { go, getEnd } = Components2.Controller;\n  const { Move, Scroll } = Components2;\n  const { translate, toIndex, getPosition, isExceeded } = Move;\n  const isSlide = Splide2.is(SLIDE);\n  const isFade = Splide2.is(FADE);\n  const isFree = options.drag === \"free\";\n  let startCoord;\n  let lastTime;\n  let basePosition;\n  let baseCoord;\n  let baseTime;\n  let lastEvent;\n  let moving;\n  let isMouse;\n  let target;\n  let exceeded;\n  function mount() {\n    if (options.drag) {\n      bind(track, POINTER_DOWN_EVENTS, onPointerDown);\n    }\n  }\n  function onPointerDown(e) {\n    isMouse = e.type === \"mousedown\";\n    target = isMouse ? window : track;\n    if (!(isMouse && e.button)) {\n      if (!Move.isBusy()) {\n        bind(target, POINTER_MOVE_EVENTS, onPointerMove);\n        bind(target, POINTER_UP_EVENTS, onPointerUp);\n        Move.cancel();\n        Scroll.cancel();\n        startCoord = getCoord(e);\n      } else {\n        prevent(e);\n      }\n    }\n  }\n  function onPointerMove(e) {\n    if (e.cancelable) {\n      const min2 = options.dragMinThreshold || 15;\n      if (isMouse || abs(getCoord(e) - startCoord) > min2) {\n        moving = true;\n        onDrag();\n      }\n      if (moving) {\n        onDragging(e);\n        prevent(e, true);\n      }\n    } else {\n      onPointerUp(e);\n    }\n  }\n  function onPointerUp(e) {\n    unbind(target, `${POINTER_MOVE_EVENTS} ${POINTER_UP_EVENTS}`);\n    moving = false;\n    if (lastEvent) {\n      onDragged(e);\n      lastEvent = null;\n    }\n  }\n  function onDrag() {\n    bind(track, \"click\", (e) => {\n      unbind(track, \"click\");\n      prevent(e, true);\n    }, { capture: true });\n    emit(EVENT_DRAG);\n  }\n  function onDragging(e) {\n    const { timeStamp } = e;\n    const expired = !lastTime || timeStamp - lastTime > SAMPLING_INTERVAL;\n    if (expired || isExceeded() !== exceeded) {\n      basePosition = getPosition();\n      baseCoord = getCoord(e);\n      baseTime = timeStamp;\n    }\n    exceeded = isExceeded();\n    lastTime = timeStamp;\n    lastEvent = e;\n    if (!isFade) {\n      translate(basePosition + constrain(getCoord(e) - baseCoord));\n    }\n    emit(EVENT_DRAGGING);\n  }\n  function onDragged(e) {\n    const velocity = computeVelocity(e);\n    if (isFade) {\n      go(Splide2.index + orient(sign(velocity)));\n    } else {\n      const destination = computeDestination(velocity);\n      if (isFree) {\n        Scroll.scroll(destination);\n      } else {\n        go(computeIndex(destination), true);\n      }\n    }\n    lastTime = 0;\n    emit(EVENT_DRAGGED);\n  }\n  function computeVelocity(e) {\n    if (Splide2.is(LOOP) || !isExceeded()) {\n      const diffCoord = getCoord(lastEvent) - baseCoord;\n      const diffTime = lastEvent.timeStamp - baseTime;\n      const isFlick = e.timeStamp - lastTime < SAMPLING_INTERVAL;\n      if (diffTime && isFlick) {\n        return diffCoord / diffTime;\n      }\n    }\n    return 0;\n  }\n  function computeDestination(velocity) {\n    const flickPower = options.flickPower || 600;\n    return getPosition() + sign(velocity) * min(abs(velocity) * flickPower, isFree ? Infinity : listSize() * (options.flickMaxPages || 1));\n  }\n  function computeIndex(destination) {\n    const dest = toIndex(destination);\n    return isSlide ? clamp(dest, 0, getEnd()) : dest;\n  }\n  function getCoord(e) {\n    return (isMouse ? e : e.touches[0])[resolve(\"pageX\")];\n  }\n  function constrain(diff) {\n    return diff / (exceeded && isSlide ? FRICTION : 1);\n  }\n  return {\n    mount\n  };\n}\n\nconst IE_ARROW_KEYS = [\"Left\", \"Right\", \"Up\", \"Down\"];\nfunction Keyboard(Splide2, Components2, options) {\n  const { on, bind, unbind } = EventInterface(Splide2);\n  const { root } = Components2.Elements;\n  const { resolve } = Components2.Direction;\n  let target;\n  function mount() {\n    init();\n    on(EVENT_UPDATED, () => {\n      destroy();\n      init();\n    });\n  }\n  function init() {\n    const { keyboard = \"global\" } = options;\n    if (keyboard) {\n      if (keyboard === \"focused\") {\n        target = root;\n        setAttribute(root, TAB_INDEX, 0);\n      } else {\n        target = window;\n      }\n      bind(target, \"keydown\", (e) => {\n        const key = normalize(e.key);\n        if (key === resolve(\"ArrowLeft\")) {\n          Splide2.go(\"<\");\n        } else if (key === resolve(\"ArrowRight\")) {\n          Splide2.go(\">\");\n        }\n      });\n    }\n  }\n  function destroy() {\n    if (target) {\n      unbind(target, \"keydown\");\n      if (isHTMLElement(target)) {\n        removeAttribute(target, TAB_INDEX);\n      }\n    }\n  }\n  function normalize(key) {\n    return includes(IE_ARROW_KEYS, key) ? `Arrow${key}` : key;\n  }\n  return {\n    mount,\n    destroy\n  };\n}\n\nconst SRC_DATA_ATTRIBUTE = `${DATA_ATTRIBUTE}-lazy`;\nconst SRCSET_DATA_ATTRIBUTE = `${SRC_DATA_ATTRIBUTE}-srcset`;\nconst IMAGE_SELECTOR = `[${SRC_DATA_ATTRIBUTE}], [${SRCSET_DATA_ATTRIBUTE}]`;\n\nfunction LazyLoad(Splide2, Components2, options) {\n  const { on, off, bind, emit } = EventInterface(Splide2);\n  const isSequential = options.lazyLoad === \"sequential\";\n  let images = [];\n  let index = 0;\n  function mount() {\n    if (options.lazyLoad) {\n      on([EVENT_MOUNTED, EVENT_REFRESH], () => {\n        destroy();\n        init();\n      });\n      if (!isSequential) {\n        on([EVENT_MOUNTED, EVENT_REFRESH, EVENT_MOVED], observe);\n      }\n    }\n  }\n  function init() {\n    Components2.Slides.forEach((_Slide) => {\n      queryAll(_Slide.slide, IMAGE_SELECTOR).forEach((_img) => {\n        const src = getAttribute(_img, SRC_DATA_ATTRIBUTE);\n        const srcset = getAttribute(_img, SRCSET_DATA_ATTRIBUTE);\n        if (src !== _img.src || srcset !== _img.srcset) {\n          const _spinner = create(\"span\", options.classes.spinner, _img.parentElement);\n          setAttribute(_spinner, ROLE, \"presentation\");\n          images.push({ _img, _Slide, src, srcset, _spinner });\n          display(_img, \"none\");\n        }\n      });\n    });\n    if (isSequential) {\n      loadNext();\n    }\n  }\n  function destroy() {\n    index = 0;\n    images = [];\n  }\n  function observe() {\n    images = images.filter((data) => {\n      if (data._Slide.isWithin(Splide2.index, options.perPage * ((options.preloadPages || 1) + 1))) {\n        return load(data);\n      }\n      return true;\n    });\n    if (!images.length) {\n      off(EVENT_MOVED);\n    }\n  }\n  function load(data) {\n    const { _img } = data;\n    addClass(data._Slide.slide, CLASS_LOADING);\n    bind(_img, \"load error\", (e) => {\n      onLoad(data, e.type === \"error\");\n    });\n    [\"src\", \"srcset\"].forEach((name) => {\n      if (data[name]) {\n        setAttribute(_img, name, data[name]);\n        removeAttribute(_img, name === \"src\" ? SRC_DATA_ATTRIBUTE : SRCSET_DATA_ATTRIBUTE);\n      }\n    });\n  }\n  function onLoad(data, error) {\n    const { _Slide } = data;\n    removeClass(_Slide.slide, CLASS_LOADING);\n    if (!error) {\n      remove(data._spinner);\n      display(data._img, \"\");\n      emit(EVENT_LAZYLOAD_LOADED, data._img, _Slide);\n      emit(EVENT_RESIZE);\n    }\n    if (isSequential) {\n      loadNext();\n    }\n  }\n  function loadNext() {\n    if (index < images.length) {\n      load(images[index++]);\n    }\n  }\n  return {\n    mount,\n    destroy\n  };\n}\n\nfunction Pagination(Splide2, Components2, options) {\n  const { on, emit, bind, unbind } = EventInterface(Splide2);\n  const { Slides } = Components2;\n  const { go, toPage, hasFocus, getIndex } = Components2.Controller;\n  const items = [];\n  let list;\n  function mount() {\n    init();\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on([EVENT_MOVE, EVENT_SCROLLED], update);\n  }\n  function init() {\n    destroy();\n    if (options.pagination && Slides.isEnough()) {\n      createPagination();\n      emit(EVENT_PAGINATION_MOUNTED, { list, items }, getAt(Splide2.index));\n      update();\n    }\n  }\n  function destroy() {\n    if (list) {\n      remove(list);\n      items.forEach((item) => {\n        unbind(item.button, \"click\");\n      });\n      empty(items);\n      list = null;\n    }\n  }\n  function createPagination() {\n    const { length } = Splide2;\n    const { classes, i18n, perPage } = options;\n    const { slider, root } = Components2.Elements;\n    const parent = options.pagination === \"slider\" && slider ? slider : root;\n    const max = hasFocus() ? length : ceil(length / perPage);\n    list = create(\"ul\", classes.pagination, parent);\n    for (let i = 0; i < max; i++) {\n      const li = create(\"li\", null, list);\n      const button = create(\"button\", { class: classes.page, type: \"button\" }, li);\n      const controls = Slides.getIn(i).map((Slide) => Slide.slide.id);\n      const text = !hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\n      bind(button, \"click\", () => {\n        go(`>${i}`);\n      });\n      setAttribute(button, ARIA_CONTROLS, controls.join(\" \"));\n      setAttribute(button, ARIA_LABEL, format(text, i + 1));\n      emit(EVENT_PAGINATION_PAGE, list, li, button, i);\n      items.push({ li, button, page: i });\n    }\n  }\n  function getAt(index) {\n    return items[toPage(index)];\n  }\n  function update() {\n    const prev = getAt(getIndex(true));\n    const curr = getAt(getIndex());\n    if (prev) {\n      removeClass(prev.button, CLASS_ACTIVE);\n      removeAttribute(prev.button, ARIA_CURRENT);\n    }\n    if (curr) {\n      addClass(curr.button, CLASS_ACTIVE);\n      setAttribute(curr.button, ARIA_CURRENT, true);\n    }\n    emit(EVENT_PAGINATION_UPDATED, { list, items }, prev, curr);\n  }\n  return {\n    items,\n    mount,\n    destroy,\n    getAt\n  };\n}\n\nconst TRIGGER_KEYS = [\" \", \"Enter\", \"Spacebar\"];\nfunction Sync(Splide2, Components2, options) {\n  const { splides } = Splide2;\n  function mount() {\n    if (options.isNavigation) {\n      navigate();\n    } else {\n      sync();\n    }\n  }\n  function sync() {\n    const processed = [];\n    splides.concat(Splide2).forEach((splide, index, instances) => {\n      EventInterface(splide).on(EVENT_MOVE, (index2, prev, dest) => {\n        instances.forEach((instance) => {\n          if (instance !== splide && !includes(processed, splide)) {\n            processed.push(instance);\n            instance.go(instance.is(LOOP) ? dest : index2);\n          }\n        });\n        empty(processed);\n      });\n    });\n  }\n  function navigate() {\n    const { on, emit } = EventInterface(Splide2);\n    on(EVENT_CLICK, (Slide) => {\n      Splide2.go(Slide.index);\n    });\n    on(EVENT_SLIDE_KEYDOWN, (Slide, e) => {\n      if (includes(TRIGGER_KEYS, e.key)) {\n        Splide2.go(Slide.index);\n        prevent(e);\n      }\n    });\n    emit(EVENT_NAVIGATION_MOUNTED, Splide2.splides);\n  }\n  return {\n    mount\n  };\n}\n\nfunction Wheel(Splide2, Components2, options) {\n  const { bind } = EventInterface(Splide2);\n  function mount() {\n    if (options.wheel) {\n      bind(Components2.Elements.track, \"wheel\", onWheel);\n    }\n  }\n  function onWheel(e) {\n    const { deltaY } = e;\n    if (deltaY) {\n      Splide2.go(deltaY < 0 ? \"<\" : \">\");\n      prevent(e);\n    }\n  }\n  return {\n    mount\n  };\n}\n\nvar ComponentConstructors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Options: Options,\n  Direction: Direction,\n  Elements: Elements,\n  Style: Style,\n  Slides: Slides,\n  Clones: Clones,\n  Layout: Layout,\n  Move: Move,\n  Controller: Controller,\n  Arrows: Arrows,\n  Autoplay: Autoplay,\n  Cover: Cover,\n  Scroll: Scroll,\n  Drag: Drag,\n  Keyboard: Keyboard,\n  LazyLoad: LazyLoad,\n  Pagination: Pagination,\n  Sync: Sync,\n  Wheel: Wheel\n});\n\nconst I18N = {\n  prev: \"Previous slide\",\n  next: \"Next slide\",\n  first: \"Go to first slide\",\n  last: \"Go to last slide\",\n  slideX: \"Go to slide %s\",\n  pageX: \"Go to page %s\",\n  play: \"Start autoplay\",\n  pause: \"Pause autoplay\"\n};\n\nconst DEFAULTS = {\n  type: \"slide\",\n  speed: 400,\n  waitForTransition: true,\n  perPage: 1,\n  arrows: true,\n  pagination: true,\n  interval: 5e3,\n  pauseOnHover: true,\n  pauseOnFocus: true,\n  resetProgress: true,\n  easing: \"cubic-bezier(.42,.65,.27,.99)\",\n  drag: true,\n  direction: \"ltr\",\n  slideFocus: true,\n  trimSpace: true,\n  classes: CLASSES,\n  i18n: I18N\n};\n\nfunction Fade(Splide2, Components2, options) {\n  const { on } = EventInterface(Splide2);\n  const { ruleBy } = Components2.Style;\n  function mount() {\n    on([EVENT_MOUNTED, EVENT_REFRESH], () => {\n      nextTick(() => {\n        Components2.Slides.forEach((Slide) => {\n          ruleBy(Slide.slide, \"transition\", `opacity ${options.speed}ms ${options.easing}`);\n        });\n      });\n    });\n  }\n  function start(index, done) {\n    const { track } = Components2.Elements;\n    ruleBy(track, \"height\", unit(rect(track).height));\n    nextTick(() => {\n      done();\n      ruleBy(track, \"height\", \"\");\n    });\n  }\n  return {\n    mount,\n    start,\n    cancel: noop\n  };\n}\n\nfunction Slide(Splide2, Components2, options) {\n  const { bind } = EventInterface(Splide2);\n  const { Move, Controller } = Components2;\n  const { list } = Components2.Elements;\n  let endCallback;\n  function mount() {\n    bind(list, \"transitionend\", (e) => {\n      if (e.target === list && endCallback) {\n        cancel();\n        endCallback();\n      }\n    });\n  }\n  function start(index, done) {\n    const destination = Move.toPosition(index, true);\n    const position = Move.getPosition();\n    const speed = getSpeed(index);\n    if (abs(destination - position) >= 1 && speed >= 1) {\n      apply(`transform ${speed}ms ${options.easing}`);\n      Move.translate(destination);\n      endCallback = done;\n    } else {\n      Move.jump(index);\n      done();\n    }\n  }\n  function cancel() {\n    apply(\"\");\n  }\n  function getSpeed(index) {\n    const { rewindSpeed } = options;\n    if (Splide2.is(SLIDE) && rewindSpeed) {\n      const prev = Controller.getIndex(true);\n      const end = Controller.getEnd();\n      if (prev === 0 && index >= end || prev >= end && index === 0) {\n        return rewindSpeed;\n      }\n    }\n    return options.speed;\n  }\n  function apply(transition) {\n    Components2.Style.ruleBy(list, \"transition\", transition);\n  }\n  return {\n    mount,\n    start,\n    cancel\n  };\n}\n\nconst _Splide = class {\n  constructor(target, options) {\n    this.event = EventBus();\n    this.Components = {};\n    this.state = State(CREATED);\n    this.splides = [];\n    this._options = {};\n    this._Extensions = {};\n    const root = isString(target) ? query(document, target) : target;\n    assert(root, `${root} is invalid.`);\n    this.root = root;\n    merge(DEFAULTS, _Splide.defaults);\n    merge(merge(this._options, DEFAULTS), options || {});\n  }\n  mount(Extensions, Transition) {\n    this.state.set(CREATED);\n    this._Transition = Transition || this._Transition || (this.is(FADE) ? Fade : Slide);\n    this._Extensions = Extensions || this._Extensions;\n    const Constructors = assign({}, ComponentConstructors, this._Extensions, { Transition: this._Transition });\n    const { Components: Components2 } = this;\n    forOwn(Constructors, (Component, key) => {\n      const component = Component(this, this.Components, this._options);\n      Components2[key] = component;\n      component.setup && component.setup();\n    });\n    forOwn(Components2, (component) => {\n      component.mount && component.mount();\n    });\n    forOwn(Components2, (component) => {\n      component.mounted && component.mounted();\n    });\n    this.emit(EVENT_MOUNTED);\n    addClass(this.root, CLASS_INITIALIZED);\n    this.state.set(IDLE);\n    this.emit(EVENT_READY);\n    return this;\n  }\n  sync(splide) {\n    this.splides.push(splide);\n    splide.splides.push(this);\n    return this;\n  }\n  go(control) {\n    this.Components.Controller.go(control);\n  }\n  on(events, callback) {\n    this.event.on(events, callback);\n    return this;\n  }\n  off(events) {\n    this.event.off(events);\n    return this;\n  }\n  emit(event, ...args) {\n    this.event.emit(event, ...args);\n    return this;\n  }\n  add(slides, index) {\n    this.Components.Slides.add(slides, index);\n    return this;\n  }\n  remove(matcher) {\n    this.Components.Slides.remove(matcher);\n    return this;\n  }\n  is(type) {\n    return this._options.type === type;\n  }\n  refresh() {\n    this.emit(EVENT_REFRESH);\n    return this;\n  }\n  destroy(completely) {\n    const { event, state } = this;\n    if (state.is(CREATED)) {\n      event.on(EVENT_READY, this.destroy.bind(this, completely), this);\n    } else {\n      forOwn(this.Components, (component) => {\n        component.destroy && component.destroy(completely);\n      });\n      event.emit(EVENT_DESTROY);\n      event.destroy();\n      empty(this.splides);\n      state.set(DESTROYED);\n    }\n    return this;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    const { _options } = this;\n    merge(_options, options);\n    if (!this.state.is(CREATED)) {\n      this.emit(EVENT_UPDATED, _options);\n    }\n  }\n  get length() {\n    return this.Components.Slides.getLength(true);\n  }\n  get index() {\n    return this.Components.Controller.getIndex();\n  }\n};\nlet Splide = _Splide;\nSplide.defaults = {};\nSplide.STATES = STATES;\n\nexport { CLASSES, CLASS_ACTIVE, CLASS_ARROW, CLASS_ARROWS, CLASS_ARROW_NEXT, CLASS_ARROW_PREV, CLASS_AUTOPLAY, CLASS_CLONE, CLASS_CONTAINER, CLASS_INITIALIZED, CLASS_LIST, CLASS_LOADING, CLASS_NEXT, CLASS_PAGINATION, CLASS_PAGINATION_PAGE, CLASS_PAUSE, CLASS_PLAY, CLASS_PREV, CLASS_PROGRESS, CLASS_PROGRESS_BAR, CLASS_ROOT, CLASS_SLIDE, CLASS_SLIDER, CLASS_SPINNER, CLASS_TRACK, CLASS_VISIBLE, EVENT_ACTIVE, EVENT_ARROWS_MOUNTED, EVENT_ARROWS_UPDATED, EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY, EVENT_AUTOPLAY_PLAYING, EVENT_CLICK, EVENT_DESTROY, EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_HIDDEN, EVENT_INACTIVE, EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_MOVE, EVENT_MOVED, EVENT_NAVIGATION_MOUNTED, EVENT_PAGINATION_MOUNTED, EVENT_PAGINATION_PAGE, EVENT_PAGINATION_UPDATED, EVENT_READY, EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_SCROLL, EVENT_SCROLLED, EVENT_SLIDE_KEYDOWN, EVENT_UPDATED, EVENT_VISIBLE, EventBus, EventInterface, RequestInterval, STATUS_CLASSES, Splide, State, Throttle, Splide as default };\n","/**\n * Returns the specified attribute value.\n *\n * @param elm  - An element.\n * @param attr - An attribute to get.\n */\nexport function getAttribute( elm: Element, attr: string ): string {\n  return elm.getAttribute( attr );\n}\n","/**\n * The data attribute name for URL hash.\n *\n * @since 0.2.0\n */\nexport const HASH_ATTRIBUTE_NAME = 'data-splide-hash';\n","import { BaseComponent, Components, EventInterface, Options, Splide, EVENT_ACTIVE } from '@splidejs/splide';\nimport { getAttribute } from '@splidejs/splide/src/js/utils';\nimport { SlideComponent } from '@splidejs/splide/src/js/components/Slides/Slide';\nimport { HASH_ATTRIBUTE_NAME } from './constants';\n\n\n/**\n * The extension for observing the URL hash change\n * and moving the slider to the slide that is associated with the hash value.\n *\n * @since 0.2.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A URLHash component object.\n */\nexport function URLHash( Splide: Splide, Components: Components, options: Options ): BaseComponent {\n\tconst { on, bind } = EventInterface( Splide );\n\tconst { setIndex, go } = Components.Controller;\n\n\t/**\n\t * Called when the component is constructed.\n\t * Determines the initial slide index by the URL hash.\n\t */\n\tfunction setup(): void {\n\t\tconst index = convertHashToIndex( location.hash );\n\t\tsetIndex( index > -1 ? index : options.start || 0 );\n\t}\n\n\t/**\n\t * Called when the component is mounted.\n\t */\n\tfunction mount(): void {\n\t\ton( EVENT_ACTIVE, onActive );\n\t\tbind( window, 'hashchange', onHashChange );\n\t}\n\n\t/**\n\t * Called when any slide becomes active.\n\t *\n\t * @param Slide - A SlideComponent that gets active.\n\t */\n\tfunction onActive( Slide: SlideComponent ): void {\n\t\tconst hash = getAttribute( Slide.slide, HASH_ATTRIBUTE_NAME );\n\n\t\tif ( hash ) {\n\t\t\tlocation.hash = hash;\n\t\t} else {\n\t\t\tif ( history ) {\n\t\t\t\t// Removes #.\n\t\t\t\thistory.replaceState( null, null, ' ' );\n\t\t\t} else {\n\t\t\t\tlocation.hash = '';\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Called when the URL hash changes.\n\t */\n\tfunction onHashChange(): void {\n\t\tconst index = convertHashToIndex( location.hash );\n\n\t\tif ( index > -1 ) {\n\t\t\tgo( index );\n\t\t}\n\t}\n\n\t/**\n\t * Converts the provided hash string to the slide index.\n\t *\n\t * @param hash - A hash string to convert.\n\t *\n\t * @return A slide index on success, or otherwise `-1`.\n\t */\n\tfunction convertHashToIndex( hash: string ): number {\n\t\thash = hash.replace( '#', '' );\n\n\t\tif ( hash ) {\n\t\t\tconst { slides } = Components.Elements;\n\n\t\t\tfor ( let i = 0; i < slides.length; i++ ) {\n\t\t\t\tif ( getAttribute( slides[ i ], HASH_ATTRIBUTE_NAME ) === hash ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\treturn {\n\t\tsetup,\n\t\tmount,\n\t}\n}\n","import { URLHash } from '../extensions';\n\n\ndeclare global {\n\tinterface Window {\n\t\tsplide: Record<string, any>;\n\t}\n}\n\nif ( typeof window !== 'undefined' ) {\n\twindow.splide = window.splide || {};\n\twindow.splide.Extensions = window.splide.Extensions || {};\n\twindow.splide.Extensions.URLHash = URLHash;\n}\n"],"names":["subject","Array","isArray","value","values","iteratee","forEach","EVENT_ACTIVE","EVENT_DESTROY","Splide22","event","key","listeners","events","callback","priority","on","off","targets","options","target","event2","push","addEventListener","filter","listener","removeEventListener","split","bind","data","unbind","offBy","destroy","emit","elm","attr","getAttribute","HASH_ATTRIBUTE_NAME","Splide3","Components2","EventInterface","Controller","setIndex","go","index","convertHashToIndex","location","hash","start","onActive","window","onHashChange","Slide2","getAttribute2","slide","history","replaceState","replace","slides","Elements","i","length","setup","mount","splide","Extensions","URLHash"],"mappings":";;;;;;;;;;;AA6BA,kBAAA,CAAiBA,OAAjB,EAA0B;WACjBC,MAAMC,OAAN,CAAcF,OAAd;;;AAqBT,kBAAA,CAAiBG,KAAjB,EAAwB;WACfD,QAAQC,MAAR,GAAiBA,KAAjB,GAAyB,CAACA,KAAD;;;AAGlC,kBAAA,CAAiBC,MAAjB,EAAyBC,QAAzB,EAAmC;YACzBD,QAAQE,QAAQD;;;AAsX1B,MAAME,eAAe,QAArB;AAcA,MAAMC,gBAAgB,SAAtB;;AA8DA,yBAAA,CAAwBC,QAAxB,EAAiC;QACvBC,QAAUD,SAAVC;QACFC,MAAM;QACRC,YAAY;;gBACJC,QAAQC,UAAUC,UAAU;YAChCC,GAAGH,QAAQC,UAAUH,KAAKI;;;iBAErBF,QAAQ;YACbI,IAAIJ,QAAQF;;;kBAENO,SAASL,QAAQC,UAAUK,SAAS;mBACnCD,SAASL,QAAQ,UAACO,MAAD,EAASC,MAAT,EAAoB;kBACtCC,KAAK,CAACF,MAAD,EAASC,MAAT,EAAiBP,QAAjB,EAA2BK,OAA3B;eACRI,iBAAiBF,QAAQP,UAAUK;;;;oBAG9BD,SAASL,QAAQ;mBAClBK,SAASL,QAAQ,UAACO,MAAD,EAASC,MAAT,EAAoB;oBACpCT,UAAUY,MAAV,CAAiB,UAACC,QAAD,EAAc;cACrCA,SAAS,EAAT,KAAgBL,MAAhB,IAA0BK,SAAS,EAAT,KAAgBJ,QAAQ;mBAC7CK,oBAAoBL,QAAQI,SAAS,IAAIA,SAAS;mBAClD;;;iBAEF;SALG;;;;0BASMP,SAASL,QAAQR,UAAU;cACvCa,SAAS,UAACE,MAAD,EAAY;YACvBA,QAAQ;iBACHO,MAAM,KAAKrB,QAAQD,SAASuB,IAAT,CAAc,IAAd,EAAoBR,MAApB;;;;;uBAIb;kBACLR,UAAUY,MAAV,CAAiB,UAACK,IAAD;AAAA,eAAUC,OAAOD,KAAK,IAAIA,KAAK,GAA/B;AAAA,OAAjB;YACNE,MAAMpB;;;UAERK,GAAGR,eAAewB,SAASrB;WAC1B;AACLK,MAAAA,IAAAA,EADK;AAELC,MAAAA,KAAAA,GAFK;AAGLgB,MAAAA,MAAMvB,MAAMuB,IAHP;AAILL,MAAAA,MAAAA,IAJK;AAKLE,MAAAA,QAAAA,MALK;AAMLE,MAAAA,SAAAA;AANK;;;AC3hBF,wBAAA,CAAuBE,GAAvB,EAAqCC,IAArC,EAA4D;WAC1DD,IAAIE,YAAJ,CAAkBD,IAAlB;;;ACFF,MAAME,sBAAsB,kBAA5B;;ACaA,kBAAA,CAAkBC,OAAlB,EAAkCC,WAAlC,EAA0DpB,OAA1D,EAA4F;0BAC7EqB,eAAgBF;QAA7BtB,qBAAAA;QAAIY,uBAAAA;;gCACaW,YAAWE;QAA5BC,iCAAAA;QAAUC,2BAAAA;;qBAMK;UAChBC,QAAQC,mBAAoBC,SAASC;eACjCH,QAAQ,EAAR,GAAaA,KAAb,GAAqBzB,QAAQ6B,KAAR,IAAiB;;;qBAM1B;SAClBzC,cAAc0C;WACZC,QAAQ,cAAcC;;;sBAQVC,QAA8B;UAC1CL,OAAOM,cAAcD,OAAME,OAAOjB;;UAEnCU,MAAO;iBACFA,OAAOA;aACV;YACDQ,SAAU;kBAENC,aAAc,MAAM,MAAM;eAC5B;mBACGT,OAAO;;;;;4BAQW;UACvBH,QAAQC,mBAAoBC,SAASC;;UAEtCH,QAAQ,IAAK;WACbA;;;;gCAWuBG,MAAuB;aAC5CA,KAAKU,OAAL,CAAc,GAAd,EAAmB,EAAnB;;UAEFV,MAAO;YACHW,SAAWnB,YAAWoB,SAAtBD;;iBAEEE,IAAI,GAAGA,IAAIF,OAAOG,QAAQD,KAAM;cACpCP,cAAcK,OAAQE,IAAKvB,oBAA3B,KAAqDU,MAAO;mBACzDa;;;;;aAKH;;;WAGD;AACNE,MAAAA,OAAAA,KADM;AAENC,MAAAA,OAAAA;AAFM;;;ACpFR,MAAK,OAAOb,MAAP,KAAkB,WAAvB,EAAqC;WAC7Bc,SAASd,OAAOc,MAAP,IAAiB;WAC1BA,OAAOC,aAAaf,OAAOc,MAAP,CAAcC,UAAd,IAA4B;WAChDD,OAAOC,WAAWC,UAAUA;;;;;;;;;"}